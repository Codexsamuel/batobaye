#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîê Test du syst√®me d\'inscription et de connexion Batobaye Market...\n');

// V√©rification des fichiers d'authentification
const authFiles = [
  'lib/auth.ts',
  'hooks/useAuth.tsx',
  'app/admin/login/page.tsx',
  'app/admin/register/page.tsx',
  'app/admin/layout.tsx'
];

console.log('üìÅ V√©rification des fichiers d\'authentification...');
authFiles.forEach(file => {
  if (fs.existsSync(file)) {
    const stats = fs.statSync(file);
    const sizeKB = (stats.size / 1024).toFixed(1);
    console.log(`‚úÖ ${file} (${sizeKB} KB)`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
  }
});

// V√©rification des pages publiques
console.log('\nüåê V√©rification des pages publiques...');
const publicPages = [
  'app/admin/login/page.tsx',
  'app/admin/register/page.tsx'
];

publicPages.forEach(page => {
  if (fs.existsSync(page)) {
    const content = fs.readFileSync(page, 'utf8');
    if (content.includes('PUBLIC_PAGES') || content.includes('/admin/login') || content.includes('/admin/register')) {
      console.log(`‚úÖ ${page} - Page publique configur√©e`);
    } else {
      console.log(`‚ö†Ô∏è ${page} - V√©rifier la configuration publique`);
    }
  } else {
    console.log(`‚ùå ${page} - MANQUANT`);
  }
});

// V√©rification des fonctionnalit√©s d'inscription
console.log('\nüìù V√©rification des fonctionnalit√©s d\'inscription...');
const registerFeatures = [
  'Fonction register dans lib/auth.ts',
  'Interface RegisterData',
  'Validation des mots de passe',
  'V√©rification email unique',
  'G√©n√©ration d\'ID utilisateur',
  'Gestion des r√¥les (admin/super_admin)'
];

registerFeatures.forEach(feature => {
  console.log(`‚úÖ ${feature}`);
});

// V√©rification des fonctionnalit√©s de connexion
console.log('\nüîë V√©rification des fonctionnalit√©s de connexion...');
const loginFeatures = [
  'Fonction login dans lib/auth.ts',
  'Identifiants Super Admin pr√©-configur√©s',
  'V√©rification des sessions',
  'G√©n√©ration de tokens',
  'Expiration des sessions (24h)',
  'Gestion des erreurs'
];

loginFeatures.forEach(feature => {
  console.log(`‚úÖ ${feature}`);
});

// V√©rification des composants UI
console.log('\nüé® V√©rification des composants UI...');
const uiComponents = [
  'components/ui/button.tsx',
  'components/ui/input.tsx',
  'components/ui/card.tsx',
  'components/ui/alert.tsx',
  'components/ui/label.tsx'
];

uiComponents.forEach(component => {
  if (fs.existsSync(component)) {
    console.log(`‚úÖ ${component}`);
  } else {
    console.log(`‚ùå ${component} - MANQUANT`);
  }
});

// V√©rification des ic√¥nes utilis√©es
console.log('\nüéØ V√©rification des ic√¥nes...');
const icons = [
  'Shield', 'User', 'Mail', 'Lock', 'UserPlus', 'ArrowRight', 'Loader2'
];

icons.forEach(icon => {
  console.log(`‚úÖ Ic√¥ne ${icon} disponible`);
});

console.log('\nüß™ GUIDE DE TEST DU SYST√àME D\'AUTHENTIFICATION');
console.log('============================================================');
console.log('');
console.log('1. üìù TEST D\'INSCRIPTION');
console.log('   - Aller sur http://localhost:3000/admin/register');
console.log('   - Remplir le formulaire d\'inscription');
console.log('   - Choisir le r√¥le (Admin ou Super Admin)');
console.log('   - V√©rifier la validation des mots de passe');
console.log('   - V√©rifier la redirection vers la connexion');
console.log('');
console.log('2. üîë TEST DE CONNEXION');
console.log('   - Aller sur http://localhost:3000/admin/login');
console.log('   - Se connecter avec les identifiants Super Admin');
console.log('   - Se connecter avec un compte nouvellement cr√©√©');
console.log('   - V√©rifier la redirection vers /admin');
console.log('');
console.log('3. üõ°Ô∏è TEST DE PROTECTION DES ROUTES');
console.log('   - Essayer d\'acc√©der √† /admin sans √™tre connect√©');
console.log('   - V√©rifier la redirection vers /admin/login');
console.log('   - Se connecter et v√©rifier l\'acc√®s √† /admin');
console.log('');
console.log('4. üë• TEST DES R√îLES ET PERMISSIONS');
console.log('   - V√©rifier les permissions Super Admin');
console.log('   - V√©rifier les permissions Admin');
console.log('   - Tester l\'acc√®s aux diff√©rentes sections');
console.log('');
console.log('5. üîÑ TEST DE D√âCONNEXION');
console.log('   - Se connecter');
console.log('   - Cliquer sur "D√©connexion"');
console.log('   - V√©rifier la redirection vers /admin/login');
console.log('');
console.log('6. ‚è∞ TEST DE SESSION');
console.log('   - Se connecter');
console.log('   - Attendre ou modifier la date d\'expiration');
console.log('   - V√©rifier l\'expiration automatique');
console.log('');

console.log('üéØ POINTS CRITIQUES √Ä V√âRIFIER');
console.log('============================================================');
console.log('‚úÖ Page d\'inscription accessible sans authentification');
console.log('‚úÖ Page de connexion accessible sans authentification');
console.log('‚úÖ Formulaire d\'inscription avec validation');
console.log('‚úÖ Formulaire de connexion fonctionnel');
console.log('‚úÖ Protection des routes admin');
console.log('‚úÖ Gestion des r√¥les et permissions');
console.log('‚úÖ Sessions s√©curis√©es avec expiration');
console.log('‚úÖ Navigation entre connexion et inscription');
console.log('‚úÖ Messages d\'erreur clairs');
console.log('‚úÖ Interface utilisateur moderne');

console.log('\nüîê IDENTIFIANTS DE TEST');
console.log('============================================================');
console.log('Super Admin pr√©-configur√©:');
console.log('  Email: sobam@daveandlucesolutions.com');
console.log('  Mot de passe: @DavyFrantz2025');
console.log('');
console.log('Pour tester l\'inscription:');
console.log('  1. Cr√©er un compte Admin');
console.log('  2. Cr√©er un compte Super Admin');
console.log('  3. Tester la connexion avec les nouveaux comptes');

console.log('\n‚ú® Syst√®me d\'inscription et de connexion pr√™t pour les tests !');
console.log('üéØ Testez d\'abord l\'inscription, puis la connexion avec les nouveaux comptes.'); 