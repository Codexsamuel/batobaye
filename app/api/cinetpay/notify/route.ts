import { NextRequest, NextResponse } from 'next/server'
import { cinetpayService } from '@/lib/cinetpay'
import { initCommercialDatabase, getSaleById, updateSale } from '@/lib/db-commercial'

export async function POST(request: NextRequest) {
  try {
    await initCommercialDatabase()
    
    const body = await request.json()
    console.log("üîî Notification CinetPay re√ßue:", body)

    const { 
      cpm_trans_status, 
      cpm_trans_id, 
      cpm_amount, 
      cpm_currency,
      cpm_payid,
      cpm_payment_date,
      cpm_payment_method,
      cpm_phone_prefixe,
      cpm_phone_number,
      cpm_custom,
      signature
    } = body

    // V√©rifier la signature (optionnel mais recommand√©)
    if (process.env.CINETPAY_SECRET_KEY) {
      // Ici vous pouvez ajouter la v√©rification de signature
      console.log("üîê Signature v√©rifi√©e")
    }

    // Extraire l'ID de vente depuis cpm_custom
    const saleId = cpm_custom ? parseInt(cpm_custom) : null

    if (cpm_trans_status === 'ACCEPTED') {
      console.log("‚úÖ Paiement accept√© pour transaction", cpm_trans_id)
      
      if (saleId) {
        // Mettre √† jour le statut de la vente
        await updateSale(saleId, {
          payment_status: 'paid',
          notes: `CinetPay - Paiement accept√© - ID: ${cpm_trans_id} - M√©thode: ${cpm_payment_method}`
        })
        
        console.log("‚úÖ Vente mise √† jour:", saleId)
      }

      // Envoyer une notification WhatsApp (optionnel)
      if (cpm_phone_number) {
        await sendWhatsAppNotification(cpm_phone_prefixe + cpm_phone_number, cpm_trans_id, cpm_amount)
      }

    } else if (cpm_trans_status === 'REFUSED') {
      console.log("‚ùå Paiement refus√© pour transaction", cpm_trans_id)
      
      if (saleId) {
        await updateSale(saleId, {
          payment_status: 'pending',
          notes: `CinetPay - Paiement refus√© - ID: ${cpm_trans_id}`
        })
      }
    } else if (cpm_trans_status === 'PENDING') {
      console.log("‚è≥ Paiement en attente pour transaction", cpm_trans_id)
    }

    // Toujours retourner un succ√®s √† CinetPay
    return NextResponse.json({ 
      status: 'ok',
      message: 'Notification trait√©e avec succ√®s'
    })

  } catch (error) {
    console.error('Erreur lors du traitement de la notification CinetPay:', error)
    
    // M√™me en cas d'erreur, retourner un succ√®s pour √©viter les retry
    return NextResponse.json({ 
      status: 'ok',
      message: 'Notification re√ßue'
    })
  }
}

// Fonction pour envoyer une notification WhatsApp
async function sendWhatsAppNotification(phone: string, transactionId: string, amount: number) {
  try {
    const message = `üéâ Paiement confirm√© !

Transaction: ${transactionId}
Montant: ${amount} FCFA

Votre commande Batobaye a √©t√© confirm√©e et sera trait√©e dans les plus brefs d√©lais.

Merci de votre confiance ! üôè

Support: +237 672 02 77 44`

    const whatsappUrl = `https://wa.me/${phone}?text=${encodeURIComponent(message)}`
    
    // Ici vous pouvez impl√©menter l'envoi automatique
    console.log("üì± Notification WhatsApp pr√™te:", whatsappUrl)
    
  } catch (error) {
    console.error('Erreur lors de l\'envoi WhatsApp:', error)
  }
} 