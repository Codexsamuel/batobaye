"use client"

import { useState, useEffect, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { 
  MessageCircle, 
  X, 
  Send, 
  Bot, 
  User, 
  Loader2,
  Sparkles,
  ShoppingCart,
  Package,
  Truck,
  Shield,
  Clock,
  Star,
  AlertTriangle,
  HelpCircle,
  Phone,
  Mail,
  MapPin
} from 'lucide-react'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  metadata?: {
    intent?: string
    confidence?: number
    category?: 'reclamation' | 'sav' | 'produit' | 'general'
    suggestedActions?: string[]
  }
}

interface AIResponse {
  message: string
  intent: string
  confidence: number
  category: 'reclamation' | 'sav' | 'produit' | 'general'
  suggestedActions?: string[]
  followUpQuestions?: string[]
}

export default function GlobalAIAssistant() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: "Bonjour ! Je suis l'assistant virtuel de Batobaye Market. Je peux vous aider avec :\n\n‚Ä¢ üì¶ **Produits** : Informations, prix, disponibilit√©\n‚Ä¢ üõ†Ô∏è **Service Apr√®s-Vente** : R√©parations, garantie, support\n‚Ä¢ ‚ö†Ô∏è **R√©clamations** : Probl√®mes, litiges, remboursements\n‚Ä¢ üìû **Contact** : Connexion avec un agent humain\n\nComment puis-je vous aider aujourd'hui ?",
      timestamp: new Date(),
      metadata: {
        intent: 'greeting',
        confidence: 1,
        category: 'general'
      }
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // Focus input when chat opens
  useEffect(() => {
    if (isOpen && inputRef.current) {
      setTimeout(() => inputRef.current?.focus(), 100)
    }
  }, [isOpen])

  // Advanced AI processing logic
  const processUserMessage = async (userMessage: string): Promise<AIResponse> => {
    const lowerMessage = userMessage.toLowerCase()
    
    // Intent recognition with confidence scoring
    const intents = [
      {
        keywords: ['r√©clamation', 'plainte', 'probl√®me', 'd√©faut', 'cass√©', 'ne marche pas', 'erreur', 'litige'],
        intent: 'reclamation',
        category: 'reclamation' as const,
        confidence: 0.9
      },
      {
        keywords: ['sav', 'r√©paration', 'garantie', 'maintenance', 'service', 'technique', 'panne'],
        intent: 'sav',
        category: 'sav' as const,
        confidence: 0.85
      },
      {
        keywords: ['produit', 'prix', 'disponible', 'acheter', 'commander', 'livraison', 'r√©frig√©rateur', 't√©l√©viseur', 'cuisini√®re'],
        intent: 'produit',
        category: 'produit' as const,
        confidence: 0.8
      },
      {
        keywords: ['agent', 'humain', 'parler', 't√©l√©phone', 'appeler', 'contact'],
        intent: 'contact_human',
        category: 'general' as const,
        confidence: 0.9
      }
    ]

    // Find best matching intent
    let bestIntent = intents[0]
    let maxConfidence = 0

    for (const intent of intents) {
      const keywordMatches = intent.keywords.filter(keyword => 
        lowerMessage.includes(keyword)
      ).length
      
      if (keywordMatches > 0) {
        const confidence = Math.min(0.95, intent.confidence + (keywordMatches * 0.1))
        if (confidence > maxConfidence) {
          maxConfidence = confidence
          bestIntent = intent
        }
      }
    }

    // Generate contextual response
    let response: AIResponse

    switch (bestIntent.intent) {
      case 'reclamation':
        response = {
          message: `Je comprends que vous avez une r√©clamation. Pour mieux vous aider, j'ai besoin de quelques informations :

‚Ä¢ Quel produit est concern√© ?
‚Ä¢ Quand avez-vous fait l'achat ?
‚Ä¢ Quel est le probl√®me exact ?
‚Ä¢ Avez-vous votre facture ou num√©ro de commande ?

En attendant, voici nos proc√©dures de r√©clamation :
üìã **R√©clamation standard** : Traitement sous 48h
üîÑ **Remboursement** : Sous 5 jours ouvrables
üìû **Urgence** : Contact direct au +237 XXX XXX XXX

Souhaitez-vous que je vous connecte √† un agent sp√©cialis√© en r√©clamations ?`,
          intent: 'reclamation',
          confidence: maxConfidence,
          category: 'reclamation',
          suggestedActions: ['Connecter √† un agent', 'Cr√©er un ticket', 'Voir nos garanties'],
          followUpQuestions: ['Avez-vous votre facture ?', 'Le produit est-il encore sous garantie ?']
        }
        break

      case 'sav':
        response = {
          message: `Service Apr√®s-Vente Batobaye Market √† votre service ! 

üîß **Nos services SAV :**
‚Ä¢ R√©paration sur site (Douala, Yaound√©)
‚Ä¢ Pi√®ces d√©tach√©es originales
‚Ä¢ Garantie √©tendue disponible
‚Ä¢ Maintenance pr√©ventive

üìã **Pour une intervention :**
‚Ä¢ Num√©ro de s√©rie du produit
‚Ä¢ Description du probl√®me
‚Ä¢ Adresse d'intervention
‚Ä¢ Disponibilit√©

‚è∞ **D√©lais d'intervention :**
‚Ä¢ Urgence : 24h
‚Ä¢ Standard : 48-72h
‚Ä¢ Maintenance : 1 semaine

Voulez-vous programmer une intervention ou avez-vous besoin d'informations sur nos garanties ?`,
          intent: 'sav',
          confidence: maxConfidence,
          category: 'sav',
          suggestedActions: ['Programmer intervention', 'Voir garanties', 'Demander devis'],
          followUpQuestions: ['Quel est le num√©ro de s√©rie ?', 'Le probl√®me est-il urgent ?']
        }
        break

      case 'produit':
        response = {
          message: `Parfait ! Je peux vous pr√©senter nos produits phares :

üõçÔ∏è **Nos Cat√©gories :**
‚Ä¢ R√©frig√©rateurs (Samsung, LG, Midea)
‚Ä¢ T√©l√©viseurs (4K, Smart TV, 55" √† 75")
‚Ä¢ Cuisini√®res (Gaz, √âlectrique, Mixte)
‚Ä¢ Cong√©lateurs (C√¥te √† c√¥te, Armoire)
‚Ä¢ Lave-linge (Automatique, Semi-auto)

üí∞ **Offres actuelles :**
‚Ä¢ Livraison gratuite > 100,000 FCFA
‚Ä¢ Installation professionnelle incluse
‚Ä¢ Garantie 2 ans minimum
‚Ä¢ Paiement en 3x sans frais

üéØ **Produits populaires :**
‚Ä¢ Samsung RT38K501J8A (R√©frig√©rateur)
‚Ä¢ LG 55NANO75SQA (T√©l√©viseur 4K)
‚Ä¢ Midea MC-FS4018 (Cuisini√®re 4 feux)

Quel type de produit vous int√©resse ? Je peux vous donner des d√©tails sp√©cifiques !`,
          intent: 'produit',
          confidence: maxConfidence,
          category: 'produit',
          suggestedActions: ['Voir catalogue complet', 'Demander devis', 'V√©rifier disponibilit√©'],
          followUpQuestions: ['Quel est votre budget ?', 'Quelle marque pr√©f√©rez-vous ?']
        }
        break

      case 'contact_human':
        response = {
          message: `Bien s√ªr ! Je vais vous connecter √† un agent humain.

üìû **Contact direct :**
‚Ä¢ T√©l√©phone : +237 XXX XXX XXX
‚Ä¢ WhatsApp : +237 XXX XXX XXX
‚Ä¢ Email : contact@batobaye.com

üìç **Nos showrooms :**
‚Ä¢ Douala : Rue XXX, Quartier XXX
‚Ä¢ Yaound√© : Avenue XXX, Centre-ville

‚è∞ **Horaires d'ouverture :**
‚Ä¢ Lundi-Samedi : 8h-20h
‚Ä¢ Dimanche : 9h-18h

Un agent va vous contacter dans les 5 minutes. En attendant, puis-je vous aider avec autre chose ?`,
          intent: 'contact_human',
          confidence: maxConfidence,
          category: 'general',
          suggestedActions: ['Attendre l\'appel', 'Laisser un message', 'Prendre RDV']
        }
        break

      default:
        response = {
          message: `Je ne suis pas s√ªr de comprendre votre demande. Pouvez-vous pr√©ciser ?

Je peux vous aider avec :
‚Ä¢ üì¶ **Produits** : Informations, prix, disponibilit√©
‚Ä¢ üõ†Ô∏è **SAV** : R√©parations, garantie, maintenance  
‚Ä¢ ‚ö†Ô∏è **R√©clamations** : Probl√®mes, litiges, remboursements
‚Ä¢ üìû **Contact** : Connexion avec un agent

Ou tapez "agent" pour parler √† un humain directement.`,
          intent: 'clarification',
          confidence: 0.3,
          category: 'general',
          suggestedActions: ['Voir nos produits', 'Service apr√®s-vente', 'Contacter un agent']
        }
    }

    return response
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return

    const userMessage = inputValue.trim()
    setInputValue('')
    
    // Add user message
    const userMsg: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: userMessage,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, userMsg])
    setIsLoading(true)

    try {
      // Simulate AI processing delay
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))
      
      const aiResponse = await processUserMessage(userMessage)
      
      const assistantMsg: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: aiResponse.message,
        timestamp: new Date(),
        metadata: {
          intent: aiResponse.intent,
          confidence: aiResponse.confidence,
          category: aiResponse.category,
          suggestedActions: aiResponse.suggestedActions
        }
      }
      
      setMessages(prev => [...prev, assistantMsg])
    } catch (error) {
      console.error('Error processing message:', error)
      
      const errorMsg: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: "D√©sol√©, j'ai rencontr√© une erreur. Veuillez r√©essayer ou contacter directement notre √©quipe au +237 XXX XXX XXX.",
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, errorMsg])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleSuggestedAction = (action: string) => {
    setInputValue(action)
    handleSendMessage()
  }

  return (
    <>
      {/* Floating Chat Button */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 w-14 h-14 rounded-full bg-batobaye-primary hover:bg-batobaye-primary/90 text-white shadow-lg hover:shadow-xl transition-all duration-300 z-50"
          size="icon"
        >
          <MessageCircle className="w-6 h-6" />
        </Button>
      )}

      {/* Chat Interface */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 w-96 h-[500px] bg-white rounded-2xl shadow-2xl border border-gray-200 z-50 flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-4 bg-batobaye-primary text-white rounded-t-2xl">
            <div className="flex items-center space-x-2">
              <Bot className="w-5 h-5" />
              <span className="font-semibold">Assistant Batobaye</span>
            </div>
            <Button
              onClick={() => setIsOpen(false)}
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>

          {/* Messages */}
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] rounded-2xl px-4 py-2 ${
                      message.role === 'user'
                        ? 'bg-batobaye-primary text-white'
                        : 'bg-gray-100 text-gray-800'
                    }`}
                  >
                    <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                    
                    {/* Suggested Actions */}
                    {message.metadata?.suggestedActions && message.role === 'assistant' && (
                      <div className="mt-3 space-y-2">
                        {message.metadata.suggestedActions.map((action, index) => (
                          <Button
                            key={index}
                            onClick={() => handleSuggestedAction(action)}
                            variant="outline"
                            size="sm"
                            className="w-full text-xs bg-white hover:bg-gray-50"
                          >
                            {action}
                          </Button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-2xl px-4 py-2">
                    <div className="flex items-center space-x-2">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span className="text-sm text-gray-600">Assistant en train d'√©crire...</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>

          {/* Input */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex space-x-2">
              <Input
                ref={inputRef}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Tapez votre message..."
                className="flex-1"
                disabled={isLoading}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isLoading}
                className="bg-batobaye-primary hover:bg-batobaye-primary/90"
                size="icon"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            
            {/* Quick Actions */}
            <div className="flex flex-wrap gap-2 mt-3">
              <Badge
                variant="secondary"
                className="cursor-pointer hover:bg-gray-200 text-xs"
                onClick={() => handleSuggestedAction("Je veux voir vos produits")}
              >
                üì¶ Produits
              </Badge>
              <Badge
                variant="secondary"
                className="cursor-pointer hover:bg-gray-200 text-xs"
                onClick={() => handleSuggestedAction("J'ai un probl√®me avec un produit")}
              >
                üõ†Ô∏è SAV
              </Badge>
              <Badge
                variant="secondary"
                className="cursor-pointer hover:bg-gray-200 text-xs"
                onClick={() => handleSuggestedAction("Je veux parler √† un agent")}
              >
                üìû Agent
              </Badge>
            </div>
          </div>
        </div>
      )}
    </>
  )
} 